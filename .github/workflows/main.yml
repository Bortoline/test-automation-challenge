# CI/CD Pipeline para Testes Automatizados
# 
# Este pipeline executa diferentes tipos de testes:
# - Testes de Performance (K6)
# - Testes de API (Playwright)
# - Testes E2E Web (Cucumber + Playwright)
# - Testes Mobile (WebDriverIO + Appium com emulador Android)
#
# Para testes mobile, este pipeline configura:
# - Android SDK e emulador
# - Appium server
# - Ambiente de virtualização KVM para melhor performance
# 
# Alternativa: Use docker-android container (veja job comentado mobile-tests-docker)

name: CI/CD - Testes Automatizados

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for API tests
        uses: actions/cache@v4
        with:
          path: api-tests/node_modules
          key: ${{ runner.os }}-api-node-${{ hashFiles('api-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-api-node-

      - name: Cache node modules for E2E tests
        uses: actions/cache@v4
        with:
          path: e2e-tests/node_modules
          key: ${{ runner.os }}-e2e-node-${{ hashFiles('e2e-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-node-

      - name: Cache node modules for Mobile tests
        uses: actions/cache@v4
        with:
          path: mobile-tests/node_modules
          key: ${{ runner.os }}-mobile-node-${{ hashFiles('mobile-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-mobile-node-

      - name: Cache node modules for K6 tests
        uses: actions/cache@v4
        with:
          path: k6-tests/node_modules
          key: ${{ runner.os }}-k6-node-${{ hashFiles('k6-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-k6-node-

      - name: Install K6
        run: |
          curl -s https://dl.k6.io/key.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/k6-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Install API Test Dependencies
        run: cd api-tests && npm ci

      - name: Install E2E Test Dependencies
        run: cd e2e-tests && npm ci

      - name: Install Mobile Test Dependencies
        run: cd mobile-tests && npm ci

      - name: Install K6 Test Dependencies
        run: cd k6-tests && npm ci

  performance-tests:
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for K6 tests
        uses: actions/cache@v4
        with:
          path: k6-tests/node_modules
          key: ${{ runner.os }}-k6-node-${{ hashFiles('k6-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-k6-node-

      - name: Install K6
        run: |
          curl -s https://dl.k6.io/key.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/k6-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Install K6 Test Dependencies
        run: cd k6-tests && npm ci

      - name: Create reports directory
        run: mkdir -p reports/k6

      - name: Run K6 Load Test (Short Version with HTML Reports)
        run: cd k6-tests && npm run k6:test-short

      - name: Upload K6 Report
        uses: actions/upload-artifact@v4
        with:
          name: k6-reports
          path: reports/k6/
          if-no-files-found: warn

  api-tests:
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for API tests
        uses: actions/cache@v4
        with:
          path: api-tests/node_modules
          key: ${{ runner.os }}-api-node-${{ hashFiles('api-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-api-node-

      - name: Create reports directory
        run: mkdir -p reports/api-tests

      - name: Install API Test Dependencies
        run: cd api-tests && npm ci

      - name: Run Playwright API Tests
        run: cd api-tests && npx playwright test

      - name: Upload API Test Report
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: reports/api-tests/
          if-no-files-found: warn

  e2e-tests:
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for E2E tests
        uses: actions/cache@v4
        with:
          path: e2e-tests/node_modules
          key: ${{ runner.os }}-e2e-node-${{ hashFiles('e2e-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-node-

      - name: Create reports directory
        run: mkdir -p reports/e2e-tests

      - name: Install E2E Test Dependencies
        run: cd e2e-tests && npm ci
        
      - name: Install Playwright Browsers for E2E
        run: cd e2e-tests && npx playwright install --with-deps

      - name: Run Playwright Cucumber E2E Tests (Sauce Demo)
        run: cd e2e-tests && npm test
        continue-on-error: true

      - name: Upload E2E Test Report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-reports
          path: reports/e2e-tests/
          if-no-files-found: warn

  mobile-tests:
    needs: install-deps
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29]
        target: [default]
        arch: [x86_64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for Mobile tests
        uses: actions/cache@v4
        with:
          path: mobile-tests/node_modules
          key: ${{ runner.os }}-mobile-node-${{ hashFiles('mobile-tests/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-mobile-node-

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache AVD
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.arch }}-${{ matrix.target }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Create reports directory
        run: mkdir -p reports/mobile-tests

      - name: Install Mobile Test Dependencies
        run: cd mobile-tests && npm ci

      - name: Install Appium
        run: npm install -g appium@next

      - name: Install Appium UiAutomator2 Driver
        run: appium driver install uiautomator2

      - name: Start Appium Server
        run: |
          appium server --port 4723 --log-level info &
          sleep 5
        
      - name: Run Mobile Tests with Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            echo "Waiting for emulator to be ready..."
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
            echo "Emulator is ready!"
            echo "Waiting additional time for emulator stabilization..."
            sleep 20
            curl -f http://localhost:4723/status || (echo "Appium server not ready" && exit 1)
            adb shell settings put system accelerometer_rotation 0
            adb shell input keyevent 82
            adb shell input swipe 300 1000 300 500
            cd mobile-tests && timeout 300 npm test || echo "Test completed or timed out"

      - name: Force cleanup processes
        if: always()
        run: |
          echo "Cleaning up processes..."
          pkill -f appium || echo "No Appium processes to kill"
          pkill -f emulator || echo "No emulator processes to kill"
          pkill -f qemu || echo "No QEMU processes to kill"
          sleep 5

      - name: Capture Debug Info on Failure
        if: failure()
        run: |
          echo "Capturing debug information..."
          mkdir -p reports/mobile-tests/debug
          adb shell screencap -p /sdcard/screenshot.png || echo "Screenshot command failed"
          adb pull /sdcard/screenshot.png reports/mobile-tests/debug/emulator-screenshot.png || echo "Could not pull screenshot"
          adb shell uiautomator dump /sdcard/ui-dump.xml || echo "UI dump command failed"
          adb pull /sdcard/ui-dump.xml reports/mobile-tests/debug/ui-hierarchy.xml || echo "Could not pull UI dump"
          echo "Debug information saved to reports/mobile-tests/debug/"

      - name: Upload Mobile Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-reports
          path: reports/mobile-tests/
          if-no-files-found: warn

  archive-all-reports:
    needs: [performance-tests, api-tests, e2e-tests, mobile-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: Create consolidated report structure
        run: |
          mkdir -p consolidated-reports
          
          # Organize reports by type
          if [ -d "all-reports/k6-reports" ]; then
            cp -r all-reports/k6-reports consolidated-reports/performance-tests
          fi
          
          if [ -d "all-reports/api-test-reports" ]; then
            cp -r all-reports/api-test-reports consolidated-reports/api-tests
          fi
          
          if [ -d "all-reports/e2e-test-reports" ]; then
            cp -r all-reports/e2e-test-reports consolidated-reports/e2e-tests
          fi
          
          if [ -d "all-reports/mobile-test-reports" ]; then
            cp -r all-reports/mobile-test-reports consolidated-reports/mobile-tests
          fi
          
          # Create summary
          echo "# Test Automation Reports" > consolidated-reports/README.md
          echo "" >> consolidated-reports/README.md
          echo "Generated on: $(date)" >> consolidated-reports/README.md
          echo "" >> consolidated-reports/README.md
          echo "## Available Reports:" >> consolidated-reports/README.md
          echo "- **Performance Tests (K6)**: performance-tests/" >> consolidated-reports/README.md
          echo "  - HTML Report: performance-tests/k6-report.html" >> consolidated-reports/README.md
          echo "- **API Tests (Playwright)**: api-tests/" >> consolidated-reports/README.md
          echo "  - HTML Report: api-tests/playwright-report/index.html" >> consolidated-reports/README.md
          echo "- **E2E Tests (Cucumber + Playwright)**: e2e-tests/" >> consolidated-reports/README.md
          echo "  - HTML Report: e2e-tests/cucumber-report.html" >> consolidated-reports/README.md
          echo "- **Mobile Tests (WebDriverIO + Appium)**: mobile-tests/" >> consolidated-reports/README.md
          echo "  - HTML Report: mobile-tests/html-report/mobile-test-report.html" >> consolidated-reports/README.md
          echo "  - Allure Report: mobile-tests/allure-results/" >> consolidated-reports/README.md
          echo "" >> consolidated-reports/README.md
          echo "## How to View Reports:" >> consolidated-reports/README.md
          echo "1. Download the artifact 'all-test-reports-archive'" >> consolidated-reports/README.md
          echo "2. Extract the ZIP file" >> consolidated-reports/README.md
          echo "3. Open the HTML files in your browser" >> consolidated-reports/README.md
          echo "4. For Allure reports, use: allure serve <allure-results-folder>" >> consolidated-reports/README.md

      - name: Upload Consolidated Test Reports Archive
        uses: actions/upload-artifact@v4
        with:
          name: all-test-reports-archive
          path: consolidated-reports/
          retention-days: 30

